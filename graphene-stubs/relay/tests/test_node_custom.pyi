from ...types import Interface as Interface, ObjectType as ObjectType, Schema as Schema
from ...types.scalars import Int as Int, String as String
from ..node import Node as Node
from typing import Any, Optional

class CustomNode(Node):
    class Meta:
        name: str = ...
    @staticmethod
    def to_global_id(type: Any, id: Any) -> Any: ...
    @staticmethod
    def get_node_from_global_id(
        info: Any, id: Any, only_type: Optional[Any] = ...
    ) -> Any: ...

class BasePhoto(Interface):
    width: Any = ...

class User(ObjectType):
    class Meta:
        interfaces: Any = ...
    name: Any = ...

class Photo(ObjectType):
    class Meta:
        interfaces: Any = ...

user_data: Any
photo_data: Any

class RootQuery(ObjectType):
    node: Any = ...

schema: Any

def test_str_schema_correct() -> None: ...
def test_gets_the_correct_id_for_users() -> None: ...
def test_gets_the_correct_id_for_photos() -> None: ...
def test_gets_the_correct_name_for_users() -> None: ...
def test_gets_the_correct_width_for_photos() -> None: ...
def test_gets_the_correct_typename_for_users() -> None: ...
def test_gets_the_correct_typename_for_photos() -> None: ...
def test_ignores_photo_fragments_on_user() -> None: ...
def test_returns_null_for_bad_ids() -> None: ...
def test_have_correct_node_interface() -> None: ...
def test_has_correct_node_root_field() -> None: ...
